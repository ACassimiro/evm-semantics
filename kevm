#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

notif_exec() {
    notif "[$(date)]: $@"
    $@
}

check_k_install() {
    which kast &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
    which krun &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
}

INSTALL_BIN="$(cd $(dirname $0) && pwd)"
INSTALL_LIB="$(dirname ${INSTALL_BIN})/lib/kevm"
INSTALL_INCLUDE=${INSTALL_LIB}/include

install_k_bin=${INSTALL_LIB}/kframework/bin
plugin_include=${INSTALL_LIB}/blockchain-k-plugin/include
libff_dir=${INSTALL_LIB}/libff
libcryptopp_dir=${INSTALL_LIB}/cryptopp

export PATH="${INSTALL_BIN}:${INSTALL_LIB}:${install_k_bin}:${PATH}"
export PYTHONPATH="${INSTALL_LIB}/kframework/lib/kframework"
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}:/usr/local/lib

export K_OPTS="${K_OPTS:--Xmx16G -Xss512m}"

export KLAB_OUT="${KLAB_OUT:-~/.klab}"

# Runners
# -------

# User Commands

run_kompile() {
    local kompile_opts openssl_root

    kompile_opts=( "${run_file}" )
    kompile_opts+=( -I "${INSTALL_INCLUDE}/kframework" -I "${plugin_include}/kframework" )
    kompile_opts+=( --hook-namespaces "JSON KRYPTO BLOCKCHAIN"                           )
    kompile_opts+=( --emit-json                                                          )

    if [[ ! -z ${concrete_rules_file} ]]; then
        if [[ -f ${concrete_rules_file} ]]; then
            kompile_opts+=(--concrete-rules "$(cat ${concrete_rules_file} | tr '\n' ',')")
        else
            fatal "Concrete rules file doesn't exist: ${concrete_rules_file}"
        fi
    fi

    case "${backend}" in
        haskell)   kompile_opts+=( --md-selector 'k & ! nobytes & ! node' --backend haskell)        ;;
        java)      kompile_opts+=( --md-selector 'k & ! bytes   & ! node' --backend java )          ;;
        llvm)      kompile_opts+=( --md-selector 'k & ! nobytes & ! node' )                         ;;&
        node)      kompile_opts+=( --md-selector 'k & ! nobytes & ! standalone' --no-llvm-kompile ) ;;&
        llvm|node) kompile_opts+=( --backend llvm )
                   kompile_opts+=( -ccopt -L${libff_dir}/lib -ccopt -I${libff_dir}/include                       )
                   kompile_opts+=( -ccopt ${plugin_include}/c/plugin_util.cpp                                    )
                   kompile_opts+=( -ccopt ${plugin_include}/c/crypto.cpp                                         )
                   kompile_opts+=( -ccopt ${plugin_include}/c/blake2.cpp                                         )
                   kompile_opts+=( -ccopt -g -ccopt -std=c++14                                                   )
                   kompile_opts+=( -ccopt -lff -ccopt -lcryptopp -ccopt -lsecp256k1 -ccopt -lssl -ccopt -lcrypto )
                   if [[ "$(uname -s)" == 'Linux' ]]; then
                       kompile_opts+=( -ccopt -lprocps )
                   elif [[ "$(uname -s)" == 'Darwin' ]]; then
                       openssl_root="$(brew --prefix openssl)"
                       brew_root="$(brew --prefix)"
                       kompile_opts+=( -ccopt -I${brew_root}/include -ccopt -L/${brew_root}/lib -ccopt -I${openssl_root}/include -ccopt -L${openssl_root}/lib )
                       kompile_opts+=( -ccopt -I${libcryptopp_dir}/include -ccopt -L/${libcryptopp_dir}/lib )
                   fi
                   ;;
        *)       fatal "Unknown backend for kompile: ${backend}" ;;
    esac
    kompile "${kompile_opts[@]}" "$@"
}

run_krun() {
    local cschedule cmode cchainid parser

    check_k_install

    case "$backend" in
        java)
            cschedule=$cSCHEDULE_kast
            cmode=$cMODE_kast
            cchainid=$cCHAINID_kast
            parser='printf %s'
            ;;
        *)
            cschedule=$cSCHEDULE_kore
            cmode=$cMODE_kore
            cchainid=$cCHAINID_kore
            parser='cat'
            ;;
    esac
    krun --directory "$backend_dir"                   \
         -cSCHEDULE="$cschedule" -pSCHEDULE="$parser" \
         -cMODE="$cmode"         -pMODE="$parser"     \
         -cCHAINID="$cchainid"   -pCHAINID="$parser"  \
         "$run_file" "$@"
}

run_kast() {
    local output_mode

    output_mode="${1:-kore}" ; shift

    case "$run_file-$output_mode" in
        *.json-kast) kast-json.py "$run_file" "$cSCHEDULE_kast" "$cMODE_kast" "$cCHAINID_kast"                  ;;
        *.json-kore) kore-json.py "$run_file" "$cSCHEDULE_kore" "$cMODE_kore" "$cCHAINID_kore"                  ;;
        *)           check_k_install ; kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@" ;;
    esac
}

run_prove() {
    local def_module run_dir proof_args bug_report_name \
          eventlog_name kprove omit_cells omit_labels klab_log pyk_args

    check_k_install

    bug_report_name="kevm-bug-$(basename "${run_file%-spec.k}")"
    eventlog_name="${run_file}.eventlog"

    kprove=kprove
    proof_args=(--directory "${backend_dir}" "${run_file}")
    proof_args+=( -I "${INSTALL_INCLUDE}/kframework" -I "${plugin_include}/kframework" )

    ! ${provex} || kprove=kprovex
      ${provex} || proof_args+=(--def-module "$verif_module")

    ! ${debug}                        || proof_args+=(--debug)
    [[ ! -f ${concrete_rules_file} ]] || proof_args+=(--concrete-rules "$(cat ${concrete_rules_file} | tr '\n' ',')")

    case "${backend}" in
        haskell) ! ${bug_report}                 || haskell_backend_command+=(--bug-report "${bug_report_name}")
                 ! ${profile}                    || haskell_backend_command+=(+RTS -l -ol${eventlog_name} -RTS)
                 [[ -z ${max_counterexamples} ]] || haskell_backend_command+=(--max-counterexamples ${max_counterexamples})
                 [[ -z ${branching_allowed}   ]] || haskell_backend_command+=(--breadth ${branching_allowed})

                 ! ${debugger}                              || proof_args+=(--debugger)
                 [[ ${#haskell_backend_command[@]} -le 1 ]] || proof_args+=(--haskell-backend-command "${haskell_backend_command[*]}")
                 ;;

        java)    if ${debugger}; then
                     omit_cells='<substate> <jumpDests> <program> <code> <callGas> <touchedAccounts> <interimStates> <callStack> <callData> <block> <txOrder> <txPending> <messages>'
                     omit_labels='#mkCall________EVM #callWithCode_________EVM #create_____EVM #mkCreate_____EVM #newAddrCreate2 #finishCodeDeposit___EVM'
                     klab_log="$(basename "${run_file%-spec.k}").k"

                     proof_args+=( --state-log --state-log-path "${KLAB_OUT}/data" --state-log-id "${klab_log}"    )
                     proof_args+=( --state-log-events OPEN,REACHINIT,REACHTARGET,REACHPROVED,RULE,SRULE,NODE,CLOSE )
                     proof_args+=( --output-flatten "_Map_ #And"                                                   )
                     proof_args+=( --output-omit "${omit_cells} ${omit_labels}"                                    )
                     proof_args+=( --no-alpha-renaming --restore-original-names --no-sort-collections              )
                     proof_args+=( --output json                                                                   )
                 fi
                 [[ -z ${branching_allowed} ]] || proof_args+=(--branching-allowed ${branching_allowed})
                 ;;
        *)       fatal "Unknown backend for proving! ${backend}" ;;
    esac

    if ${profile}; then
        timeout -s INT "${profile_timeout}" ${kprove} "${proof_args[@]}" "$@" || true
        kore-prof "${eventlog_name}" ${kore_prof_args} > "${eventlog_name}.json"
    else
        if ${pyk_minimize}; then
            pyk_args=(${backend_dir}/*-kompiled minimize /dev/stdin)
            [[ -z "${pyk_omit_labels}" ]] || pyk_args+=(--omit-labels "${pyk_omit_labels}")
            ${kprove} "${proof_args[@]}" "$@" --output json | kpyk "${pyk_args[@]}"
        else
            ${kprove} "${proof_args[@]}" "$@"
        fi
    fi
}

run_search() {
    local search_pattern
    search_pattern="$1" ; shift
    run_krun --search --pattern "$search_pattern" "$@"
}

view_klab() {
    local klab_log

    klab_log="$(basename "${run_file%-spec.k}")"

    # klab often runs out of stack space when running long-running KEVM programs
    # klab debug "$klab_log"
    KLAB_NODE_STACK_SIZE="${KLAB_NODE_STACK_SIZE:-300000}"
    node --max-old-space-size=4096 --stack-size=$KLAB_NODE_STACK_SIZE $(dirname $(which klab))/../libexec/klab-debug "$klab_log"
}

gen_bin_runtime() {
    local file_basename module_name contract_bytecode contract bytecode include_file include_module

    file_basename="$(basename ${run_file%.bytecode})"
    module_name="$(echo ${file_basename} | tr '[:lower:]' '[:upper:]')"

    echo '// This file generated by: '"$0 ${run_command}"
    echo '// '"$(date)"
    echo ''
    echo 'requires "edsl.md"'
    echo 'requires "lemmas/lemmas.k"'
    echo 'requires "lemmas/infinite-gas.k"'
    echo ''
    if [[ ! -z ${include_summary_files} ]]; then
        for include_file in $(echo ${include_summary_files} | tr ',' ' '); do
            if [[ -f ${include_file} ]]; then
                echo 'requires "'$(basename ${include_file})'"'
            else
                fatal "Included file does not exist: ${include_file}"
            fi
        done
    fi
    echo ''
    echo 'module '${module_name}'-VERIFICATION'
    echo '    imports EDSL'
    echo '    imports LEMMAS'
    echo '    imports INFINITE-GAS'
    echo '    imports '${module_name}'-BIN-RUNTIME'
    if [[ ! -z ${include_summary_modules} ]]; then
        for include_module in $(echo ${include_summary_modules} | tr ',' ' '); do
            echo "    imports ${include_module}"
        done
    fi
    echo 'endmodule'
    echo ''
    echo 'module '"${module_name}"'-BIN-RUNTIME'
    echo '    imports SERIALIZATION'
    echo ''
    echo '    syntax ByteArray ::= #binRuntime ( Contract )'
    echo ' // ---------------------------------------------'

    while read contract_bytecode; do
        contract="$(echo ${contract_bytecode} | cut --delimiter=':' --field='1')"
        bytecode="$(echo ${contract_bytecode} | cut --delimiter=':' --field='2')"

        echo ''
        echo '    syntax Contract ::= "'${contract}'"'
        echo ' // '$(echo "syntax Contract ::= \"${contract}\"" | sed 's/./-/g')
        echo '    rule #binRuntime('${contract}') => #parseByteStack("'${bytecode}'") [macro]'
        echo ''
    done < "${run_file}"

    echo 'endmodule'
}

gen_empty_spec() {
    local contract_name file_basename module_name

    contract_name="$1" ; shift
    contract_module_name="$(echo ${contract_name} | tr '[:lower:]' '[:upper:]')"

    file_basename="$(basename ${run_file%.bytecode})"
    module_name="$(echo ${file_basename} | tr '[:lower:]' '[:upper:]')"

    echo '// This file generated by: '"$0 ${run_command}"
    echo '// '"$(date)"
    echo ''
    echo 'requires "'${file_basename}'-verification.k"'
    echo ''
    echo 'module '${contract_module_name}'-EMPTY-SPEC'
    echo '    imports '${module_name}'-VERIFICATION'
    echo ''
    echo '    claim <k> #execute => #halt ... </k>'
    echo '          <mode> NORMAL </mode>'
    echo '          <schedule> '${schedule}' </schedule>'
    echo '          <program> #binRuntime('${contract_name}') </program>'
    echo '          <jumpDests> #computeValidJumpDests(#binRuntime('${contract_name}')) </jumpDests>'
    echo ''
    echo 'endmodule'
}

run_summarize() {
    local contract_name file_basename verif_file_basename module_basename verif_defn module_name init_state_json

    contract_name="$1" ; shift

    if [[ -z "${summary_dir}" ]]; then
        summary_dir="$(mktemp --directory .kevm-summarize-XXXXXX)"
        ${debug} || trap "rm -rf ${summary_dir}" INT TERM EXIT
    elif [[ -d "${summary_dir}" ]] && ${clear_summarizer_cache}; then
        rm -rf "${summary_dir}"
    fi
    mkdir -p "${summary_dir}"
    mkdir -p "${backend_dir}"
    ! ${debug} || notif "Summary directory: ${summary_dir}"

    file_basename="$(basename ${run_file%.bytecode})"
    verif_file_basename="$(echo ${file_basename} | tr '[:upper:]' '[:lower:]')-verification"
    verif_module_basename="$(echo ${file_basename} | tr '[:lower:]' '[:upper:]')"

    verif_module_name="${verif_module_basename}-VERIFICATION"
    verif_file_name="${backend_dir}/${verif_file_basename}.k"

    contract_module_name="$(echo ${contract_name} | tr '[:lower:]' '[:upper:]')"
    contract_spec_name="$(echo ${contract_name} | tr '[:upper:]' '[:lower:]')"
    spec_file_name="${summary_dir}/${contract_spec_name}-empty-spec.k"
    spec_module_name="${contract_module_name}-EMPTY-SPEC"

    init_state_json=${summary_dir}/${contract_spec_name}-init-state.json

    if ${summary_init}; then

        if [[ ! -z ${include_summary_files} ]]; then
            for include_file in $(echo ${include_summary_files} | tr ',' ' '); do
                if [[ -f ${include_file} ]]; then
                    cp ${include_file} ${backend_dir}/
                else
                    fatal "Included file does not exist: ${include_file}"
                fi
            done
        fi
        gen_bin_runtime > "${verif_file_name}"

        kevm_kompile_args=("${verif_file_name}")
        kevm_kompile_args+=(--backend haskell --directory "${backend_dir}")
        kevm_kompile_args+=(--main-module "${verif_module_name}" --syntax-module "${verif_module_name}")
        if [[ ! -z ${concrete_rules_file} ]]; then
            if [[ -f ${concrete_rules_file} ]]; then
                kevm_kompile_args+=(--concrete-rules "$(cat ${concrete_rules_file} | tr '\n' ',')")
            else
                fatal "Concrete rules file doesn't exist: ${concrete_rules_file}"
            fi
        fi
        notif_exec $0 kompile ${kevm_kompile_args[@]}

        gen_empty_spec "${contract_name}" > "${spec_file_name}"

        notif_exec $0 prove "${spec_file_name}"                       \
                       --backend haskell --directory "${backend_dir}" \
                       -I "${backend_dir}"                            \
                       --provex --spec-module "${spec_module_name}"   \
                       --depth 0 --output json                        \
                       > "${init_state_json}" || true
    fi

    notif "[$(date)] Calling summarizer"
    python3 "${INSTALL_LIB}/kevm-pyk.py"                 \
        "${backend_dir}/${verif_file_basename}-kompiled" \
        summarize                                        \
        "${init_state_json}"                             \
        "${contract_name}"                               \
        "${verif_file_basename}.k"                       \
        "${summary_dir}"                                 \
        "$@"
}

# Dev Commands

run_interpret() {
    local interpreter kast output output_text output_format exit_status cmdprefix

    interpreter="$backend_dir/driver-kompiled/interpreter"
    kast="$(mktemp)"
    output="$(mktemp)"
    output_text="$(mktemp)"
    trap "rm -rf $kast $output $output_text" INT TERM EXIT
    exit_status=0
    cmdprefix=
    output_format='kore'
    case "$backend" in
        java)    run_kast kast > "$kast"
                 output_format='kast'
                 run_file="$kast"
                 run_krun --parser 'cat' --output kast > "$output" || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format"
                 fi
                 exit "$exit_status"
                 ;;

        llvm)    run_kast kore > "$kast"
                 if $debugger; then cmdprefix="gdb --args"; fi
                 $cmdprefix "$interpreter" "$kast" -1 "$output" "$@" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        haskell) run_kast kore > "$kast"
                 kore-exec "$backend_dir/driver-kompiled/definition.kore" --pattern "$kast" --module ETHEREUM-SIMULATION --smt none --output "$output" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        *)      fatal "Bad backend for interpreter: '$backend'"
                ;;
    esac
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]] || [[ "$run_command" == '--help' ]] ; then
    echo "
        usage: $0 run          [--backend (llvm|java|haskell)]           <KEVM_arg>* <pgm>  <K arg>*
               $0 interpret    [--backend (llvm)] [--debug|--no-unparse] <KEVM_arg>* <pgm>  <interpreter arg>*
               $0 interpret    [--backend (java|haskell)] [--no-unparse] <KEVM_arg>* <pgm>
               $0 kast         [--backend (llvm|java|haskell)]           <KEVM_arg>* <pgm>  <output format> <K arg>*
               $0 prove        [--backend (java|haskell)]                            <spec> <KEVM_arg>* <K arg>*
               $0 search       [--backend (java|haskell)]                            <pgm>  <pattern> <K arg>*
               $0 kompile      [--backend (java|llvm|haskell)]                       <main> <K arg>*
               $0 klab-view                                                          <spec>
               $0 gen-bin-runtime                                        <KEVM_arg>* <bytecode_file>
               $0 gen-empty-spec                                         <KEVM_arg>* <bytecode_file> <contract_name>
               $0 summarize                                              <KEVM_arg>* <bytecode_file> <contract_name>

               $0 [help|--help|version|--version]

           $0 run             : Run a single EVM program
           $0 interpret       : Run JSON EVM programs without K Frontend (external parser)
           $0 kast            : Parse an EVM program and output it in a supported format
           $0 prove           : Run an EVM K proof
           $0 search          : Search for a K pattern in an EVM program execution
           $0 kompile         : Run kompile with arguments setup to include KEVM parameters as defaults
           $0 klab-view       : View the statelog associated with a given program or spec
           $0 gen-bin-runtime : Verification file containing definitions of supplied bin-runtimes
           $0 gen-empty-spec  : Spec to generate counterexamples for code
           $0 summarize       : Generate basic-block summary of the supplied bytecode

           $0 help    : Display this help message.
           $0 version : Display the versions of KEVM, K, Kore, and Z3 in use.

           Note: <pgm> is a path to a file containing an EVM program/test.
                 <spec> is a K specification to be proved.
                 <bytecode_file> is a file containing format CONTRACT_NAME:BYTECODE (1 per line).
                 <contract_name> is a contract listed in <bytecode_file>.
                 <main> is a K definition to be kompiled, which may include files from KEVM.
                 <KEVM arg> is one of [--mode (NORMAL|VMTESTS)]
                                      [--schedule (BERLIN|ISTANBUL|PETERSBURG|CONSTANTINOPLE|BYZANTIUM|SPURIOUS_DRAGON|TANGERINE_WHISTLE|HOMESTEAD|FRONTIER|DEFAULT)]
                                      [--chainid NNN]
                                      [--concrete-rules-file <concrete_rules_file>]
                                      [--bug-report]
                                      [--profile]
                                      [--profile-timeout <duration>]
                                      [--kore-prof-args \"<kore-prof arg>*\"]
                                      [--provex]
                                      [--verif-module <verification_module>]
                                      [--pyk-minimize]
                                      [--pyk-omit-labels <comma_separated_labels>]
                                      [--max-counterexamples <number_counterexamples>]
                                      [--branching-allowed <max_branches>]
                                      [--haskell-backend-arg <haskell_backend_arg>]
                                      [--summary-dir <directory_name>]
                                      [--include-summary-files <comman_separated_k_files>]
                                      [--include-summary-modules <comman_separated_modules>]
                                      [--no-summarizer-init]
                                      [--clear-summarizer-cache]
                 <K arg> is an argument you want to pass to K.
                 <interpreter arg> is an argument you want to pass to the derived interpreter.
                 <kore-prof arg> is an argument you want to pass to kore-prof.
                 <output format> is the format for Kast to output the term in.
                 <pattern> is the configuration pattern to search for.
                 <def_module> is the module to take as axioms when doing verification.
                 <duration> is a timeout specifier as for GNU timeout.

           klab-view: Make sure that the 'klab/bin' directory is on your PATH to use this option.
    "
    exit 0
fi

if [[ "$run_command" == 'version' ]] || [[ "$run_command" == '--version' ]]; then
    notif "KEVM Version"
    cat $INSTALL_LIB/version
    exit 0
fi

backend="llvm"
debug=false
dump=false
unparse=true
debugger=false
profile=false
profile_timeout="0"
kore_prof_args=""
bug_report=false
mode=NORMAL
schedule=BERLIN
chainid=1
concrete_rules_file=
provex=false
verif_module=VERIFICATION
pyk_minimize=false
pyk_omit_labels=
max_counterexamples=
branching_allowed=
summary_dir=
summary_init=true
clear_summarizer_cache=false
haskell_backend_command=(kore-exec)
include_summary_files=
include_summary_modules=
[[ ! "$run_command" == 'prove' ]] || backend='java'
[[ ! "$run_command" =~ klab*   ]] || backend='java'
kevm_port='8545'
kevm_host='127.0.0.1'
args=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        --debug)                   debug=true ; args+=("$1")       ; shift   ;;
        --dump)                    dump=true                       ; shift   ;;
        --no-unparse)              unparse=false                   ; shift   ;;
        --debugger)                debugger=true                   ; shift   ;;
        --profile)                 profile=true                    ; shift   ;;
        --profile-timeout)         profile_timeout="$2"            ; shift 2 ;;
        --kore-prof-args)          kore_prof_args="$2"             ; shift 2 ;;
        --bug-report)              bug_report=true                 ; shift   ;;
        --backend)                 backend="$2"                    ; shift 2 ;;
        --directory)               backend_dir="$2"                ; shift 2 ;;
        --concrete-rules-file)     concrete_rules_file="$2"        ; shift 2 ;;
        --provex)                  provex=true                     ; shift   ;;
        --verif-module)            verif_module="$2"               ; shift 2 ;;
        --pyk-minimize)            pyk_minimize=true               ; shift   ;;
        --pyk-omit-labels)         pyk_omit_labels="$2"            ; shift 2 ;;
        --max-counterexamples)     max_counterexamples="$2"        ; shift 2 ;;
        --branching-allowed)       branching_allowed="$2"          ; shift 2 ;;
        --haskell-backend-arg)     haskell_backend_command+=("$2") ; shift 2 ;;
        --mode)                    mode="$2"                       ; shift 2 ;;
        --schedule)                schedule="$2"                   ; shift 2 ;;
        --chainid)                 chainid="$2"                    ; shift 2 ;;
        --summary-dir)             summary_dir="$2"                ; shift 2 ;;
        --include-summary-files)   include_summary_files="$2"      ; shift 2 ;;
        --include-summary-modules) include_summary_modules="$2"    ; shift 2 ;;
        --no-summarizer-init)      summary_init=false              ; shift   ;;
        --clear-summarizer-cache)  clear_summarizer_cache=true     ; shift   ;;
        -p|--port)                 kevm_port="$2"                  ; shift 2 ;;
        -h|--host|--hostname)      kevm_host="$2"                  ; shift 2 ;;
        *)                         args+=("$1")                    ; shift   ;;
    esac
done

[[ "${#args[@]}" -le 0 ]] || set -- "${args[@]}"
backend_dir="${backend_dir:-$INSTALL_LIB/$backend}"

! $profile  || [[ "$backend" == haskell ]]         || fatal "Option --profile only usable with --backend haskell!"
[[ $profile_timeout = "0" ]] || $profile           || fatal "Option --profile-timeout only usable with --profile!"
[[ $kore_prof_args = "" ]]   || $profile           || fatal "Option --kore-prof-args only usable with --profile!"
if ${pyk_minimize}; then
    ! ${debugger} || fatal "Option --pyk-minimize not usable with --debugger!"
    ! ${profile}  || fatal "Option --pyk-minimize not usable with --profile!"
elif [[ ! -z ${pyk_omit_labels} ]]; then
    fatal "Option --pyk-label-omit only usable with --pyk-minimize!"
fi

# get the run file
run_file="$1" ; shift
if [[ "${run_file}" == '-' ]]; then
    tmp_input="$(mktemp)"
    trap "rm -rf ${tmp_input}" INT TERM EXIT
    cat - > "${tmp_input}"
    run_file="${tmp_input}"
fi
[[ -f "${run_file}" ]] || fatal "File does not exist: ${run_file}"

cMODE_kore="Lbl${mode}{}()"
cSCHEDULE_kore="Lbl${schedule}'Unds'EVM{}()"
cCHAINID_kore="\dv{SortInt{}}(\"${chainid}\")"

cMODE_kast="\`${mode}\`(.KList)"
cSCHEDULE_kast="\`${schedule}_EVM\`(.KList)"
cCHAINID_kast="#token(\"${chainid}\",\"Int\")"

! ${debug} || set -x

case "$run_command-$backend" in
    kompile-@(java|llvm|haskell|node) ) run_kompile     "$@" ;;
    run-@(java|llvm|haskell)          ) run_krun        "$@" ;;
    kast-@(java|llvm|haskell)         ) run_kast        "$@" ;;
    interpret-@(llvm|haskell|java)    ) run_interpret   "$@" ;;
    prove-@(java|haskell)             ) run_prove       "$@" ;;
    search-@(java|haskell)            ) run_search      "$@" ;;
    klab-view-java                    ) view_klab       "$@" ;;
    gen-bin-runtime-*                 ) gen_bin_runtime "$@" ;;
    gen-empty-spec-*                  ) gen_empty_spec  "$@" ;;
    summarize-*                       ) run_summarize   "$@" ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
